import tkinter as tk
from tkinter import ttk, colorchooser, messagebox, filedialog
import requests
import subprocess
import os
import zipfile
import py7zr
import rarfile
import shutil
import glob
import json
import configparser
import traceback

settings_file = "settings.json"

import traceback

class CustomDropdown(tk.Frame):
    def __init__(self, master, variable, values, **kwargs):
        super().__init__(master)
        self.variable = variable
        self.values = values

        self.entry = tk.Entry(self, textvariable=self.variable, width=15, justify='center')
        self.entry.pack(side='left', fill='x', expand=True)

        self.button = tk.Button(self, text='â–¼', command=self.show_dropdown, width=3)
        self.button.pack(side='left')

        self.dropdown = tk.Menu(self, tearoff=0)
        for value in self.values:
            self.dropdown.add_command(label=value, command=lambda v=value: self.select_value(v))

    def show_dropdown(self):
        x = self.button.winfo_rootx()
        y = self.button.winfo_rooty() + self.button.winfo_height()
        self.dropdown.post(x, y)

    def select_value(self, value):
        self.variable.set(value)

class AdvancedConfiguratorWindow(tk.Toplevel):
    def __init__(self, parent, zeal_dir):
        super().__init__(parent)
        self.title("Advanced Configurator")
        self.zeal_dir = zeal_dir
        self.parent = parent
        self.settings = {
            'WindowedMode': 'bool',
            'NewUI': 'bool',
            'OldUI': 'bool',
            'Log': 'bool',
            'CombatMusic': 'bool',
            'AttackOnAssist': 'bool',
            'EnableBrownSkeletonHack': 'bool',
            'EnableExtendedNameplateDistance': 'bool',
            'BitsPerPixel': 'int',
            'Width': 'int',
            'Height': 'int',
            'RefreshRate': 'int',
            'MaxFPS': 'int',
            'MaxBGFPS': 'int',
            'MaxMouseLookFPS': 'int',
            'NoFPSLimiter': 'int',
            'ChatTimestamps': 'dropdown',
            'Bluecon': 'bool',
            'ZealInput': 'bool',
            'FloatingDamage': 'bool',
            'HideLooted': 'bool',
            'TargetRing': 'bool'
        }
        self.chat_timestamp_options = {
            'None': 1,
            'Short': 2,
            'Long': 3
        }
        try:
            self.current_settings = self.load_current_settings()
            print("Current settings loaded successfully")
        except Exception as e:
            print(f"Error loading current settings: {str(e)}")
            print(traceback.format_exc())
        
        try:
            self.create_widgets()
            print("Widgets created successfully")
        except Exception as e:
            print(f"Error creating widgets: {str(e)}")
            print(traceback.format_exc())
        
        self.bind_mousewheel_to_canvas()
        self.update_idletasks()
        self.geometry(f"{self.winfo_reqwidth()}x{self.winfo_reqheight()}+{parent.winfo_x()+parent.winfo_width()+10}+{parent.winfo_y()}")
        self.transient(parent)
        self.grab_set()
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def load_current_settings(self):
        eqclient_path = os.path.join(self.zeal_dir, 'eqclient.ini')
        config = configparser.ConfigParser()
        config.optionxform = str
        config.read(eqclient_path)
        settings = {}
        for section in config.sections():
            for key in self.settings:
                if config.has_option(section, key):
                    value = config.get(section, key)
                    if self.settings[key] == 'bool':
                        settings[key] = value.lower() == 'true'
                    elif self.settings[key] == 'int':
                        settings[key] = int(value) if value.isdigit() else 0
        if 'Bluecon' in settings and settings['Bluecon']:
            for color in ['Red', 'Green', 'Blue']:
                key = f'User_70_{color}'
                if config.has_option(section, key):
                    settings[key] = int(config.get(section, key))
        return settings

    def create_widgets(self):
        main_frame = tk.Frame(self)
        main_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(main_frame)
        scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(
                scrollregion=self.canvas.bbox("all")
            )
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)

        self.widgets = {}
        for setting, type_ in self.settings.items():
            frame = tk.Frame(self.scrollable_frame)
            frame.pack(fill=tk.X, padx=5, pady=5)
            
            label = tk.Label(frame, text=f"{setting}:")
            label.pack(side=tk.LEFT)

            if type_ == 'bool':
                var = tk.BooleanVar(value=self.current_settings.get(setting, False))
                widget = tk.Checkbutton(frame, variable=var)
            elif type_ == 'dropdown' and setting == 'ChatTimestamps':
                var = tk.StringVar(value=self.get_chat_timestamp_key(self.current_settings.get(setting, 1)))
                widget = CustomDropdown(frame, var, list(self.chat_timestamp_options.keys()))
                widget.config(width=200, height=30)
            else:
                var = tk.StringVar(value=str(self.current_settings.get(setting, '')))
                widget = tk.Entry(frame, textvariable=var, width=10)

            widget.pack(side=tk.RIGHT, padx=(0, 10))
            self.widgets[setting] = var

            if setting == 'Bluecon':
                self.bluecon_var = var
                self.bluecon_var.trace('w', self.toggle_color_picker)
                self.color_button = tk.Button(frame, text="Choose Color", command=self.choose_color)
                self.color_button.pack(side=tk.RIGHT, padx=(0, 10))
                self.toggle_color_picker()

        apply_button = tk.Button(self.scrollable_frame, text="Apply Settings", command=self.apply_settings)
        apply_button.pack(pady=10)

        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    # ... (rest of the methods remain the same)

    def bind_mousewheel_to_canvas(self):
        def _on_mousewheel(event):
            self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")

        self.canvas.bind_all("<MouseWheel>", _on_mousewheel)

    def toggle_color_picker(self, *args):
        if self.bluecon_var.get():
            self.color_button.pack(side=tk.RIGHT, padx=(0, 10))
        else:
            self.color_button.pack_forget()

    def choose_color(self):
        self.attributes('-topmost', True)  # Keep window on top
        color = colorchooser.askcolor(title="Choose color", parent=self)
        self.attributes('-topmost', False)  # Remove topmost attribute
        if color[1]:
            r, g, b = [int(x) for x in color[0]]
            self.widgets['User_70_Red'] = tk.IntVar(value=r)
            self.widgets['User_70_Green'] = tk.IntVar(value=g)
            self.widgets['User_70_Blue'] = tk.IntVar(value=b)
            self.color_button.config(bg=color[1])

    def get_chat_timestamp_key(self, value):
        return next((k for k, v in self.chat_timestamp_options.items() if v == value), 'None')

    def apply_settings(self):
        eqclient_path = os.path.join(self.zeal_dir, 'eqclient.ini')
        if not os.path.exists(eqclient_path):
            messagebox.showerror("Error", "eqclient.ini file not found in the selected directory.")
            return

        config = configparser.ConfigParser()
        config.optionxform = str
        config.read(eqclient_path)

        for section in config.sections():
            for setting, var in self.widgets.items():
                if config.has_option(section, setting):
                    value = var.get()
                    if isinstance(value, bool):
                        value = 'TRUE' if value else 'FALSE'
                    elif setting == 'ChatTimestamps':
                        value = str(self.chat_timestamp_options[value])
                    config.set(section, setting, str(value))

        with open(eqclient_path, 'w') as configfile:
            config.write(configfile)

        messagebox.showinfo("Settings Applied", "Your settings have been applied successfully.")
        self.on_closing()

    def on_closing(self):
        self.parent.focus_set()  # Give focus back to the parent window
        self.destroy()  # Close the configurator window

def open_advanced_configurator():
    if not zeal_dir_entry.get():
        messagebox.showerror("Error", "Please select your Zeal directory first.")
        return
    try:
        configurator = AdvancedConfiguratorWindow(root, zeal_dir_entry.get())
        print("Advanced Configurator window opened successfully")
    except Exception as e:
        print(f"Error opening Advanced Configurator: {str(e)}")
        print(traceback.format_exc())
        messagebox.showerror("Error", f"Failed to open Advanced Configurator: {str(e)}")

def load_settings():
    if os.path.exists(settings_file):
        with open(settings_file, 'r') as f:
            return json.load(f)
    return {}

def save_settings(settings):
    with open(settings_file, 'w') as f:
        json.dump(settings, f)

def fetch_versions(github_repo):
    api_url = f"https://api.github.com/repos/{github_repo}/releases"
    response = requests.get(api_url)
    if response.status_code == 200:
        return [release['tag_name'] for release in response.json()]
    return []

def check_for_updates(github_repo, current_version, notice_label):
    api_url = f"https://api.github.com/repos/{github_repo}/releases/latest"
    response = requests.get(api_url)
    if response.status_code == 200:
        latest_version = response.json()['tag_name']
        if latest_version != current_version:
            notice_label.config(text=f"Latest Version: {latest_version}", fg="red")
        else:
            notice_label.config(text="", fg="black")
    else:
        notice_label.config(text="Failed to check for updates", fg="red")

def log_message(message, color):
    if color == "red":
        log_widget.tag_configure("red", foreground="red")
        log_widget.insert(tk.END, message + "\n", "red")
    elif color == "green":
        log_widget.tag_configure("green", foreground="green")
        log_widget.insert(tk.END, message + "\n", "green")
    else:
        log_widget.insert(tk.END, message + "\n")

def check_and_update(project_name, version, github_repo, install_dir, log_widget):
    try:
        api_url = f"https://api.github.com/repos/{github_repo}/releases/tags/{version}"
        response = requests.get(api_url)
        if response.status_code == 200:
            download_url = response.json()['assets'][0]['browser_download_url']
            download_path = os.path.join(install_dir, "temp.zip")
            r = requests.get(download_url, stream=True)
            with open(download_path, 'wb') as f:
                shutil.copyfileobj(r.raw, f)

            with zipfile.ZipFile(download_path, 'r') as zip_ref:
                zip_ref.extractall(install_dir)

            os.remove(download_path)
            log_message(f"Updated {project_name} to version {version}", "green")
            return True
        else:
            log_message(f"Failed to fetch release info for {project_name}", "red")
            return False
    except Exception as e:
        log_message(f"Error updating {project_name}: {str(e)}", "red")
        return False

def browse_directory(entry_widget):
    dir_path = filedialog.askdirectory()
    if dir_path:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, dir_path)
        save_current_settings()

def save_current_settings():
    settings = {
        "zeal_dir": zeal_dir_entry.get(),
        "quarmtool_dir": quarmtool_dir_entry.get(),
    }
    save_settings(settings)

def install_ui_files():
    zeal_dir = zeal_dir_entry.get()
    ui_files_to_install = []
    
    if zeal_dir == "":
        messagebox.showerror("Error", "Please enter an EQ directory to install UI Files.")
        return

    ui_files = [
        {"name": "Nillipuss UI 1080p", "url": "https://api.github.com/repos/NilliP/NillipussUI_1080p/releases/latest", "var": nillipuss_1080p_var},
        {"name": "Nillipuss UI 1440p", "url": "https://api.github.com/repos/NilliP/NillipussUI_1440p/releases/latest", "var": nillipuss_1440p_var},
        {"name": "QRustle", "url": "https://api.github.com/repos/UnforgivunAL/QRustle/releases/latest", "var": qrustle_var},
        {"name": "DuxaUI", "url": "https://github.com/LordDemonos/Quarm.Guide/blob/master/assets/duxaUI.7z?raw=true", "var": duxaui_var},
        {"name": "qqui (Calmethar Edition)", "url": "https://www.eqinterface.com/downloads/download.php?id=6959", "var": qqui_var}
    ]

    for ui_file in ui_files:
        if ui_file["var"].get():  # Check if the UI file checkbox is selected
            try:
                if ui_file["name"] == "qqui (Calmethar Edition)":
                    download_url = ui_file["url"]
                    file_extension = ".rar"
                elif ui_file["name"] == "DuxaUI":
                    download_url = ui_file["url"]
                    file_extension = ".7z"
                else:
                    response = requests.get(ui_file["url"])
                    if response.status_code != 200:
                        log_message(f"Failed to fetch release info for {ui_file['name']}", "red")
                        continue
                    download_url = response.json()['assets'][0]['browser_download_url']
                    file_extension = ".zip"

                download_path = os.path.join(zeal_dir, "uifiles")
                os.makedirs(download_path, exist_ok=True)
                download_path = os.path.join(download_path, f"{ui_file['name']}{file_extension}")

                r = requests.get(download_url, stream=True)
                with open(download_path, 'wb') as f:
                    shutil.copyfileobj(r.raw, f)

                # Extract downloaded files directly into /uifiles/ directory
                if file_extension == ".7z":
                    with py7zr.SevenZipFile(download_path, mode='r') as z:
                        z.extractall(os.path.join(zeal_dir, "uifiles"))
                elif file_extension == ".rar":
                    with rarfile.RarFile(download_path, 'r') as rf:
                        rf.extractall(os.path.join(zeal_dir, "uifiles/qqui"))
                else:
                    with zipfile.ZipFile(download_path, 'r') as zip_ref:
                        zip_ref.extractall(os.path.join(zeal_dir, "uifiles"))

                # Clean up temp files
                os.remove(download_path)
                ui_files_to_install.append(ui_file['name'])
                log_message(f"Installed {ui_file['name']} UI files to {zeal_dir}/uifiles", "green")
            except Exception as e:
                log_message(f"Error installing {ui_file['name']} UI files: {str(e)}", "red")

    if ui_files_to_install:
        messagebox.showinfo("Success", f"Installed UI files: {', '.join(ui_files_to_install)}")
    else:
        messagebox.showinfo("Information", "No UI files were installed.")


def update_zeal(): 
    zeal_dir = zeal_dir_entry.get() 
    log_message("Starting update process for Zeal...", "black") 
    zeal_version = zeal_version_var.get() 
    zeal_updated = check_and_update("Zeal", zeal_version, "iamclint/Zeal", zeal_dir, log_widget) 
    if not zeal_updated: 
        log_message("Zeal is already up to date.", "green")

def update_quarmtool():
    zeal_dir = zeal_dir_entry.get()
    quarmtool_dir = quarmtool_dir_entry.get()

    if quarmtool_dir == zeal_dir:
        messagebox.showerror("Error", "QuarmTool cannot be installed in the main EQ directory. Please choose another location.")
        log_message("QuarmTool cannot be installed in the main EQ directory. Please choose another location.", "red")
        return

    log_message("Starting update process for QuarmTool...", "black")
    quarmtool_version = quarmtool_version_var.get()
    quarmtool_updated = check_and_update("QuarmTool", quarmtool_version, "EJWellman/QuarmTool", quarmtool_dir, log_widget)

    if not quarmtool_updated:
        log_message("QuarmTool is already up to date.", "green")

def run_quarmtool():
    quarmtool_dir = quarmtool_dir_entry.get()
    if not quarmtool_dir:
        messagebox.showerror("Error", "QuarmTool directory is not set. Please set the directory before running QuarmTool.")
        return
    
    quarmtool_path = os.path.join(quarmtool_dir, "QuarmTool.exe")
    if not os.path.exists(quarmtool_path):
        messagebox.showerror("Error", "QuarmTool.exe not found in the specified directory.")
        return
    
    try:
        subprocess.Popen(quarmtool_path, cwd=quarmtool_dir)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to run QuarmTool: {str(e)}")

def run_project_quarm():
    zeal_dir = zeal_dir_entry.get()
    if not zeal_dir:
        messagebox.showerror("Error", "Zeal directory is not set. Please set the directory before running Project Quarm.")
        return
    
    eqgame_path = os.path.join(zeal_dir, "eqgame.exe")
    if not os.path.exists(eqgame_path):
        messagebox.showerror("Error", "eqgame.exe not found in the specified Zeal directory.")
        return
    
    try:
        os.chdir(zeal_dir)
        subprocess.Popen(eqgame_path)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to run Project Quarm: {str(e)}")

def optimize_settings():
    zeal_dir = zeal_dir_entry.get()
    if not zeal_dir:
        messagebox.showerror("Error", "In order to optimize settings, you must first select your Zeal directory. This should be your main TAKP/EQ folder.")
        return
    
    eqclient_path = os.path.join(zeal_dir, 'eqclient.ini')
    
    if not os.path.exists(eqclient_path):
        messagebox.showerror("Error", "eqclient.ini file not found in the selected directory.")
        return
    
    config = configparser.ConfigParser()
    config.optionxform = str
    config.read(eqclient_path)
    
    # Settings to optimize
    settings_to_optimize = {
        'WindowedMode': 'FALSE',
        'NewUI': 'TRUE',
        'OldUI': 'FALSE',
        'Log': 'TRUE',
        'CombatMusic': 'TRUE',
        'AttackOnAssist': 'FALSE',
        'EnableExtendedNameplateDistance': 'TRUE',
        'BitsPerPixel': '32',
        'RefreshRate': '60',
        'User_70_Red': '0',
        'User_70_Green': '133',
        'User_70_Blue': '240',
        'MaxFPS': '60',
        'MaxBGFPS': '45',
        'MaxMouseLookFPS': '60',
        'NoFPSLimiter': '1',
        'ChatTimestamps': '2',
        'Bluecon': 'TRUE',
        'ZealInput': 'TRUE',
        'FloatingDamage': 'TRUE',
        'HideLooted': 'FALSE',
        'TargetRing': 'TRUE'
    }

    # Iterate through all sections and update settings if they exist
    for section in config.sections():
        for key, value in settings_to_optimize.items():
            if config.has_option(section, key):
                config.set(section, key, value)

    # Update specific settings that require special handling
    config['VideoMode']['Width'] = str(root.winfo_screenwidth())
    config['VideoMode']['Height'] = str(root.winfo_screenheight())

    # Write the changes back to the ini file
    with open(eqclient_path, 'w') as configfile:
        config.write(configfile)
    
    messagebox.showinfo("Optimization Complete", "Your settings have been optimized.")

# Create the main window
root = tk.Tk()
root.title("Quarm+ {Zeal/QT Patcher}")
root.geometry("600x700")

# Load saved settings
settings = load_settings()

# Create and place the directory input fields
header_font = ('Helvetica', 12)

tk.Label(root, text="Zeal Directory:", font=header_font).pack()
zeal_dir_frame = tk.Frame(root)
zeal_dir_frame.pack()
zeal_dir_entry = tk.Entry(zeal_dir_frame, width=50)
zeal_dir_entry.pack(side=tk.LEFT)
zeal_dir_button = tk.Button(zeal_dir_frame, text="Browse", command=lambda: browse_directory(zeal_dir_entry))
zeal_dir_button.pack(side=tk.LEFT)
zeal_notice = tk.Label(zeal_dir_frame, text="")
zeal_notice.pack(side=tk.LEFT, padx=10)

# Automatically fill Zeal version dropdown
tk.Label(root, text="Select Zeal Version:").pack()
zeal_version_var = tk.StringVar(root)
zeal_versions = fetch_versions("iamclint/Zeal")
if zeal_versions:
    zeal_version_var.set(zeal_versions[0])  # Select the most recent version by default
zeal_version_dropdown = tk.OptionMenu(root, zeal_version_var, *zeal_versions)
zeal_version_dropdown.pack()

if "zeal_dir" in settings:
    zeal_dir_entry.insert(0, settings["zeal_dir"])

tk.Label(root, text="QuarmTool Directory:", font=header_font).pack()
quarmtool_dir_frame = tk.Frame(root)
quarmtool_dir_frame.pack()
quarmtool_dir_entry = tk.Entry(quarmtool_dir_frame, width=50)
quarmtool_dir_entry.pack(side=tk.LEFT)
quarmtool_dir_button = tk.Button(quarmtool_dir_frame, text="Browse", command=lambda: browse_directory(quarmtool_dir_entry))
quarmtool_dir_button.pack(side=tk.LEFT)
quarmtool_notice = tk.Label(quarmtool_dir_frame, text="")
quarmtool_notice.pack(side=tk.LEFT, padx=10)

# Automatically fill QuarmTool version dropdown
tk.Label(root, text="Select QuarmTool Version:").pack()
quarmtool_version_var = tk.StringVar(root)
quarmtool_versions = fetch_versions("EJWellman/QuarmTool")
if quarmtool_versions:
    quarmtool_version_var.set(quarmtool_versions[0])  # Select the most recent version by default
quarmtool_version_dropdown = tk.OptionMenu(root, quarmtool_version_var, *quarmtool_versions)
quarmtool_version_dropdown.pack()

if "quarmtool_dir" in settings:
    quarmtool_dir_entry.insert(0, settings["quarmtool_dir"])

# Create Install Custom UI's section
tk.Label(root, text="Install Custom UI's:", font=header_font).pack()
ui_checkboxes_frame = tk.Frame(root)
ui_checkboxes_frame.pack(pady=10)

nillipuss_1080p_var = tk.BooleanVar()
nillipuss_1080p_var.set(False)
tk.Checkbutton(ui_checkboxes_frame, text="Nillipuss UI 1080p", variable=nillipuss_1080p_var).pack(anchor=tk.W)

nillipuss_1440p_var = tk.BooleanVar()
nillipuss_1440p_var.set(False)
tk.Checkbutton(ui_checkboxes_frame, text="Nillipuss UI 1440p", variable=nillipuss_1440p_var).pack(anchor=tk.W)

qrustle_var = tk.BooleanVar()
qrustle_var.set(False)
tk.Checkbutton(ui_checkboxes_frame, text="QRustle", variable=qrustle_var).pack(anchor=tk.W)

duxaui_var = tk.BooleanVar()
duxaui_var.set(False)
tk.Checkbutton(ui_checkboxes_frame, text="DuxaUI", variable=duxaui_var).pack(anchor=tk.W)

qqui_var = tk.BooleanVar()
qqui_var.set(False)
tk.Checkbutton(ui_checkboxes_frame, text="qqui (Calmethar Edition) [WinRar/Unrar Required]", variable=qqui_var).pack(anchor=tk.W)

# Create and place the Update and Launch buttons
buttons_frame = tk.Frame(root)
buttons_frame.pack(pady=10)

update_zeal_button = tk.Button(buttons_frame, text="Update/Install Zeal", command=update_zeal)
update_zeal_button.pack(side=tk.LEFT, padx=5)

update_quarmtool_button = tk.Button(buttons_frame, text="Update/Install QuarmTool", command=update_quarmtool)
update_quarmtool_button.pack(side=tk.LEFT, padx=5)

update_ui_button = tk.Button(buttons_frame, text="Install Selected UI Files", command=install_ui_files)
update_ui_button.pack(side=tk.LEFT, padx=5)

# Buttons for "Optimize Settings" and "Advanced Configurator"
tk.Label(root, text="Settings:", font=header_font).pack()

buttons_frame = tk.Frame(root)
buttons_frame.pack(pady=10)

optimize_button = tk.Button(buttons_frame, text="Apply Suggested Settings", command=optimize_settings)
optimize_button.pack(side=tk.LEFT, padx=5)

advanced_config_button = tk.Button(buttons_frame, text="Advanced Configurator", command=open_advanced_configurator)
advanced_config_button.pack(side=tk.LEFT, padx=5)

# Buttons for "Play" section
tk.Label(root, text="Play:", font=header_font).pack()

play_buttons_frame = tk.Frame(root)
play_buttons_frame.pack(pady=10)

run_quarmtool_button = tk.Button(play_buttons_frame, text="Run QuarmTool", command=run_quarmtool)
run_quarmtool_button.pack(side=tk.LEFT, padx=5)

run_project_quarm_button = tk.Button(play_buttons_frame, text="Run Project Quarm", command=run_project_quarm)
run_project_quarm_button.pack(side=tk.LEFT, padx=5)

# Create a frame to hold the log widget and scrollbar
log_frame = tk.Frame(root)
log_frame.pack(fill=tk.BOTH, expand=True)

# Create the log widget (Text) and scrollbar
log_widget = tk.Text(log_frame, width=70, height=10, wrap=tk.WORD)
log_scrollbar = tk.Scrollbar(log_frame, orient="vertical", command=log_widget.yview)

# Configure the log widget to use the scrollbar
log_widget.configure(yscrollcommand=log_scrollbar.set)

# Pack the log widget and scrollbar
log_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Configure tags for colored text (if you're using them)
log_widget.tag_configure("red", foreground="red")
log_widget.tag_configure("green", foreground="green")
log_widget.tag_configure("black", foreground="black")

# Save settings when directories are changed
zeal_dir_entry.bind("<FocusOut>", lambda e: save_current_settings())
quarmtool_dir_entry.bind("<FocusOut>", lambda e: save_current_settings())

# Check for updates when the app starts
check_for_updates("iamclint/Zeal", zeal_version_var.get(), zeal_notice)
check_for_updates("EJWellman/QuarmTool", quarmtool_version_var.get(), quarmtool_notice)

# Run the main loop
root.mainloop()
